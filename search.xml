<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>WebPack使用指南</title>
    <url>/2021/05/31/WebPack%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h3 id="webpack使用指南"><a href="#webpack使用指南" class="headerlink" title="webpack使用指南"></a>webpack使用指南</h3><ul>
<li><p>模块化开发</p>
<blockquote>
<p>方便代码重用，提升开发效率，方便后期维护</p>
</blockquote>
</li>
<li><p>统一模块化规范——ES6模块化</p>
<ul>
<li><p>每个JS文件都是一个独立的模块</p>
</li>
<li><p>导入模块用<strong>import</strong>关键字</p>
<span id="more"></span>

<blockquote>
<p>import mod1, {a, b, c as 333, show} from ‘./mod1.js’</p>
</blockquote>
</li>
<li><p>暴露模块用<strong>export</strong>关键字(export default每个js文件，只能一个)</p>
<blockquote>
<p>export default{a, b, show}</p>
<p>export let c = ‘ccc’</p>
<p>export let d = ‘ddd’</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Node.js中使用ES6模块化</p>
<ol>
<li>npx init (“生成package.json)</li>
<li>package.json添加”type“: “modole”</li>
<li>npx index.js</li>
</ol>
</li>
<li><p>webpack概述</p>
<blockquote>
<p>webpack 提供了友好的模块化支持，以及代码压缩混淆、处理 js 兼容问题、性能优化等强大的功能</p>
</blockquote>
</li>
<li><p>在项目中安装和配置 webpack</p>
<ol>
<li>运行 <strong>npm install webpack webpack-cli –D</strong> 命令，安装 webpack 相关的包</li>
<li>在项目根目录中，创建名为 webpack.config.js 的 webpack 配置文件</li>
<li>修改 webpack.config.js 的mode为 ‘development’（不过分压缩js）</li>
<li>修改 package.json 的 script 为 “dev”: “webpack”</li>
<li>npm run dev</li>
</ol>
</li>
<li><p>配置打包的入口与出口</p>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span> <span class="token comment">// 导入 node.js 中专门操作路径的模块</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
 entry<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 打包入口文件的路径</span>
 output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
 path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件的存放路径</span>
 filename<span class="token operator">:</span> <span class="token string">'bundle.js'</span> <span class="token comment">// 输出文件的名称</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>webpack 的自动打包功能</p>
<ol>
<li><p>运行 <strong>npm install webpack-dev-server –D</strong> 命令，安装支持项目自动打包的工具</p>
</li>
<li><p>修改 package.json 的 script 为 “dev”: “webpack-dev-server”</p>
</li>
<li><p>修改 index.html 的 script 为  src=”/bundle.js”</p>
</li>
<li><p>npm run dev</p>
</li>
<li><p>浏览器中访问 <a href="http://localhost:8080/">http://localhost:8080</a> 地址</p>
</li>
<li><p>修改package.json 的 script ，添加相关配置</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
 <span class="token string">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --open --host 127.0.0.1 --port 8888"</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p>html-webpack-plugin 生成 index.html 指引页面</p>
<ol>
<li><p>运行 <strong>npm install html-webpack-plugin –D</strong> 命令，安装生成预览页面的插件</p>
</li>
<li><p>修改 webpack.config.js 文件头部区域，添加如下配置信息：</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 导入生成预览页面的插件，得到一个构造函数</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> htmlPlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token comment">// 创建插件的实例对象</span>
 template<span class="token operator">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span> <span class="token comment">// 指定要用到的模板文件</span>
 filename<span class="token operator">:</span> <span class="token string">'index.html'</span> <span class="token comment">// 指定生成的文件的名称，该文件存在于内存中，在目录中不显示</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>修改 webpack.config.js 文件中向外暴露的配置对象，新增如下配置节点：</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
	plugins<span class="token operator">:</span> <span class="token punctuation">[</span> htmlPlugin <span class="token punctuation">]</span> <span class="token comment">// plugins 数组是 webpack 打包期间会用到的一些插件列表</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p>webpack 各种加载器loader</p>
<blockquote>
<p> 在实际开发过程中，webpack 默认只能打包处理以 .js 后缀名结尾的模块，（而且只支持部分ES6代码）</p>
</blockquote>
<blockquote>
<p>其他的模块，webpack 默认处理不了，需要调用 loader 加载器才可以正常打包，否则会报错！</p>
</blockquote>
</li>
<li><p>style-loader css-loader</p>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js">rules<span class="token operator">:</span> <span class="token punctuation">[</span>
 	<span class="token punctuation">&#123;</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>
 <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>less-loader less</p>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js">rules<span class="token operator">:</span> <span class="token punctuation">[</span>
 	<span class="token punctuation">&#123;</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>
 <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>url-loader file-loader</p>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js">rules<span class="token operator">:</span> <span class="token punctuation">[</span>
 	<span class="token punctuation">&#123;</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">'url-loader?limit=16940'</span><span class="token punctuation">&#125;</span>
 <span class="token punctuation">]</span>

<span class="token comment">//? 之后的是 loader 的参数项</span>
<span class="token comment">//只有小于 limit 大小(单位是字节byte)的图片，才会被转为 base64 图片</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>postcss-loader 自动添加 css 的兼容前缀</p>
<ol>
<li><p>npm i postcss-loader autoprefixer -D</p>
</li>
<li><p>创建 postcss.config.js，并初始化</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> autoprefixer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span> <span class="token comment">// 导入自动添加前缀的插件</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	plugins<span class="token operator">:</span> <span class="token punctuation">[</span> autoprefixer <span class="token punctuation">]</span> <span class="token comment">// 挂载插件</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>修改 webpack.config.js , 添加rules</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    rules<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span> test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-			loader'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p>babel-loader 处理 js 文件中的高级语法</p>
<ol>
<li><p>npm i babel-loader babel-core babel-preset-env -D  </p>
</li>
<li><p>npm i @babel/plugin-proposal-class-properties</p>
</li>
<li><p>npm i @babel/plugin-syntax-class-properties</p>
</li>
<li><p>创建 balbel.config.js ，并初始化</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    presets<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">'env'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
    plugins<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">'@babel/plugin-transform-runtime'</span><span class="token punctuation">,</span> '@babel<span class="token operator">/</span>plugin<span class="token operator">-</span>			proposalclass<span class="token operator">-</span>properties’ <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>
        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>修改 webpack.config.js , 添加rules</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js"> module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
     rules<span class="token operator">:</span> <span class="token punctuation">[</span>
<span class="token comment">// exclude 为排除项，表示 babel-loader 不需要处理 node_modules 中的 js 文件</span>
 		<span class="token punctuation">&#123;</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span> exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">&#125;</span>
     <span class="token punctuation">]</span>
 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p>webpack 项目中引入 vue单文件</p>
<ol>
<li><p>运行 <strong>npm i vue-loader vue-template-compiler -D</strong> 命令</p>
</li>
<li><p>修改 webpack.config.js , 添加插件plugins</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader/lib/plugin'</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
     module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
     rules<span class="token operator">:</span> <span class="token punctuation">[</span>
     <span class="token comment">// ... 其它规则</span>
     <span class="token punctuation">&#123;</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> loader<span class="token operator">:</span> <span class="token string">'vue-loader'</span> <span class="token punctuation">&#125;</span>
     <span class="token punctuation">]</span>
     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
     plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
     <span class="token comment">// ... 其它插件</span>
     <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 请确保引入这个插件！</span>
     <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>运行 <strong>npm i vue –S</strong> 安装 vue</p>
</li>
<li><p>修改 index.js ，通过 <strong>import Vue from ‘vue’</strong> 来导入 vue 构造函数</p>
</li>
<li><p>通过 <strong>import App from ‘./component/app.vue’</strong> 再导入App.vue 文件</p>
</li>
<li><p>创建 vue 的实例对象，并指定要控制的 el 区域，再通过 render 函数渲染 App 根组件</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1. 导入 Vue 构造函数</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token comment">// 2. 导入 App 根组件</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./components/App.vue'</span>

<span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
     <span class="token comment">// 3. 指定 vm 实例要控制的页面区域</span>
     el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
     <span class="token comment">// 4. 通过 render 函数，把指定的组件渲染到 el 区域中</span>
     <span class="token comment">// 5. render 函数 会把 el 指定的容器中的内容，全部清空覆盖！</span>
     <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">createVue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
         <span class="token keyword">return</span> <span class="token function">createVue</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
        <tag>指南</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE高级使用</title>
    <url>/2021/05/31/VUE%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="组件化（Component）"><a href="#组件化（Component）" class="headerlink" title="组件化（Component）"></a>组件化（Component）</h3><ul>
<li><p>全局注册</p>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>组件名称<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
	<span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//组件数据（每个组件的数据都是私有的）</span>
        <span class="token punctuation">&#125;</span>		
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token comment">//注意：组件模板，只允许一对根标签</span>
    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">组件模板</span><span class="token template-punctuation string">`</span></span>，   
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<span id="more"></span>
<ul>
<li><p>局部注册</p>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> ComponentA <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	data<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	template<span class="token operator">:</span> <span class="token string">'&lt;a>AAA&lt;/a>'</span><span class="token punctuation">,</span>
	methods<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    el<span class="token operator">:</span> <span class="token string">'#example'</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//因为html语法对大小写不敏感(用引号包括的字符串不算)</span>
        <span class="token comment">//因此驼峰命名法要转换为 “短横线”</span>
        <span class="token string">'component-a'</span><span class="token operator">:</span> ComponentA<span class="token punctuation">,</span>
        <span class="token string">'component-b'</span><span class="token operator">:</span> ComponentB<span class="token punctuation">,</span>
        <span class="token string">'component-c'</span><span class="token operator">:</span> ComponentC<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    data<span class="token punctuation">,</span>
    methods<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>组件用法</p>
  <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- 2   组件使用:组件是以标签对的形式使用  --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">//   注册组件 </span>
    <span class="token comment">// 1、 my-component 就是组件中自定义的标签名</span>
	Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
              title<span class="token operator">:</span> myComponet<span class="token punctuation">,</span>
              num<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
              list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token comment">// 模板template有多行内容使用反引号` `         </span>
      template<span class="token operator">:</span> <span class="token string">'&lt;div>A custom component!&lt;/div>'</span><span class="token punctuation">,</span>      
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

    <span class="token comment">// 创建根实例</span>
    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      el<span class="token operator">:</span> <span class="token string">'#example'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>父组件向子组件</strong>传值</p>
<ol>
<li><p>父组件通过<strong>属性绑定</strong>，向子组件传值</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js">data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    date<span class="token operator">:</span> <span class="token string">'2020-12-11'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
	&lt;son :date='date'>&lt;/son>
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>子组件通过<strong>props</strong>接受</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>‘son'<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    template<span class="token operator">:</span> <span class="token string">'&lt;div>&#123;&#123; date &#125;&#125;&lt;/div>'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p><strong>子组件向父组件</strong>传值</p>
<ol>
<li><p>子组件通过<strong>事件绑定</strong>$emit，向父组件传递信息</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js">template<span class="token operator">:</span> <span class="token string">'&lt;button @click='</span><span class="token function">enlargeText</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token string">'>扩大字体&lt;/button>'</span><span class="token punctuation">,</span>
methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">enlargeText</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token comment">//要传输多参数时，val可作为obj类传出</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'enlarge-text'</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>父组件监听子组件的事件</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js">template<span class="token operator">:</span> <span class="token string">'&lt;son @enlarge-text='</span><span class="token function">enlargeText</span><span class="token punctuation">(</span>$event<span class="token punctuation">)</span><span class="token string">'>&lt;/son>'</span><span class="token punctuation">,</span>
methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">enlargeText</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		fontSize <span class="token operator">+=</span> size<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p><strong>兄弟组件间</strong>数据交互</p>
<ol>
<li><p>单独的<strong>事件中心</strong>管理组件间的通信 </p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> eventHub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>发送、监听与销毁事件</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//建立名为“add-todo”的通讯，发送数据todo</span>
eventHub<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'add-todo'</span><span class="token punctuation">,</span> todo<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//一般在mounted阶段，接收通讯，并执行回调函数addTodo</span>
eventHub<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'add-todo'</span><span class="token punctuation">,</span> addTodo<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//一般在浏览器关闭阶段，销毁通讯</span>
eventHub<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">'add-todo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p>组件插槽的作用</p>
<blockquote>
<p>父组件向子组件传递内容，更方便修改内容</p>
<p>组件的最大特性就是复用性，而用好插槽能大大提高组件的可复用能力</p>
</blockquote>
</li>
<li><p>组件插槽的基本用法</p>
<ol>
<li><p>子组件置入插槽</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'son'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;div>
    	&lt;strong>Error!&lt;/strong>
    	&lt;slot>&lt;/slot>
    &lt;/div>
    </span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>父组件写入插槽</p>
 <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- “Something wrong happend.” 会渲染在&lt;slot>标签 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>son</span><span class="token punctuation">></span></span> Something wrong happend. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>son</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p> 具名插槽用法</p>
</li>
<li><p> 作用域插槽</p>
</li>
</ul>
<h3 id="异步编程（async"><a href="#异步编程（async" class="headerlink" title="异步编程（async)"></a>异步编程（async)</h3><ul>
<li><p>接口调用方式</p>
<ol>
<li>原生ajax</li>
<li>基于jQuery的ajax</li>
<li>fetch</li>
<li>axios</li>
</ol>
</li>
<li><p>url地址格式</p>
<ol>
<li><p>传统的URL</p>
<blockquote>
<p><strong>××://　　××:×× 　　  /××　　　　/×× 　?××&amp;××   #××<br>协议 　 域名:端口 　 虚拟目录 　文件名　 参数　   锚</strong></p>
</blockquote>
</li>
<li><p>Restful风格的URL</p>
<ul>
<li><p>一个 URL 应该用来定位资源，而不应该掺入对操作行为的描述</p>
<blockquote>
<p>POST  /api/teams/123/members/456<br>（查询 ID 为 123 的团队下 ID 为 456 的成员）</p>
</blockquote>
</li>
<li><p>GET</p>
<blockquote>
<p>GET请求把参数拼接在url后面，以？分隔，多个参数之间用&amp;连接</p>
</blockquote>
</li>
<li><p>POST</p>
<blockquote>
<p>POST请求把提交的数据放在请求体中，不会在url中显示</p>
</blockquote>
</li>
<li><p>PUT</p>
<blockquote>
<p>PUT 用于更新资源的全部信息，在请求的 body 中需要传入修改后的全部资源主体</p>
</blockquote>
</li>
<li><p>PATCH</p>
<blockquote>
<p>PATCH 用于局部更新，在 body 中只需要传入需要改动的资源字段</p>
</blockquote>
</li>
<li><p>DELETE</p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>js中常见的异步调用</p>
<ul>
<li>定时函数setTimeout, setInterval</li>
<li>ajax（接口调用）</li>
<li>事件函数</li>
</ul>
</li>
</ul>
<h3 id="Promise-承诺"><a href="#Promise-承诺" class="headerlink" title="Promise(承诺)"></a>Promise(承诺)</h3><ul>
<li><p>promise函数的作用</p>
<blockquote>
<p>主要解决异步深层嵌套（回调地狱）</p>
<p>语法更加简洁（generator会更简洁）</p>
</blockquote>
</li>
<li><p>promise基本使用</p>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//为setTimeout异步任务，生成一个promise对象</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token comment">//正常执行resolve,异常执行reject</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出'OK'</span>

<span class="token comment">//也可以这样写(promise实例方法)</span>
p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finished'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>基于Promise发送Ajax请求</p>
  <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">/*
    基于Promise发送Ajax请求
    */</span>
    <span class="token keyword">function</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        # <span class="token number">1.1</span> 创建一个Promise实例
        <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    # <span class="token number">1.2</span> 处理正常的情况
                    <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                    # <span class="token number">1.3</span> 处理异常情况
                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'服务器错误'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
            xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    # 注意： 这里需要开启一个服务
    # 在then方法中，你也可以直接<span class="token keyword">return</span> Promise对象，就在后面的then中就可以接收到数据了
    <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data'</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            # <span class="token number">1.4</span> 想要继续链式编程下去 需要 <span class="token keyword">return</span>（返回的也是Promise）
            <span class="token keyword">return</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>promise对象方法</p>
<ul>
<li><p>Promise.all</p>
<blockquote>
<p>会等待所有的promise，但只要一个reject，Promise.all立即返回reject(拒绝整体)</p>
</blockquote>
</li>
<li><p>Promise.allSettled</p>
<blockquote>
<p>类似于Promise.all，allSetteld会等待所有的promise(无论对错)，并得到它的结果</p>
</blockquote>
</li>
<li><p>Promise.race</p>
<blockquote>
<p>不同于Promise.all，只等待第一个出结果(无论对错)的promise，并得到其结果(或错误)</p>
</blockquote>
</li>
<li><p>Promise.any</p>
<blockquote>
<p>类似于Promise.race，但只等待第一个resolve的promise，并得到它的结果</p>
<p>如果所有给定的承诺都被拒绝，则返回以 AggregateError一个特殊的错误对象，它将所有promise 错误存储在其 errors 属性</p>
</blockquote>
</li>
</ul>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/a1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/a2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> p3 <span class="token operator">=</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/a3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// all 中的参数 [p1,p2,p3] 和 返回的结果一 一对应  </span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 由于p1执行较快，Promise的then()将获得结果'P1'</span>
    <span class="token comment">// p2,p3仍在继续执行，但执行结果将被丢弃。</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">//新增方法</span>
Promise<span class="token punctuation">.</span>allSettled
Promise<span class="token punctuation">.</span>any

#Promise<span class="token punctuation">.</span>all实例运用
<span class="token keyword">let</span> urls <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">'https://api.github.com/users/iliakan'</span><span class="token punctuation">,</span>
  <span class="token string">'https://api.github.com/users/remy'</span><span class="token punctuation">,</span>
  <span class="token string">'https://api.github.com/users/jeresig'</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">//通过map,将url映射为fetch请求</span>
<span class="token keyword">let</span> requests <span class="token operator">=</span> urls<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">url</span> <span class="token operator">=></span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Promise.all 会等待所有的promise都resolved</span>
Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>requests<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">responses</span> <span class="token operator">=></span> responses<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>
    <span class="token parameter">response</span> <span class="token operator">=></span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>response<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="Fetch-API"><a href="#Fetch-API" class="headerlink" title="Fetch API"></a>Fetch API</h3><blockquote>
<p>Fetch API是新的ajax解决方案 Fetch会返回Promise</p>
<p>Fetch 不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象</p>
</blockquote>
<ul>
<li><p>fetch基本使用</p>
<ul>
<li>fetch 就是 ajax + Promise. 使用的方式和 jquery 提供的 $.ajax() 差不多</li>
<li>fetch 默认是get请求</li>
</ul>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.1 GET参数传递 - 传统URL 通过url ？ 的形式传参</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/books?id=123'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    # <span class="token keyword">get</span> 请求可以省略不写 默认的是<span class="token constant">GET</span>
    method<span class="token operator">:</span> <span class="token string">'get'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        # 它返回一个Promise实例对象，用于获取后台返回的数据
        <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        # 在这个then里面我们能拿到最终的数据
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="Axios-API"><a href="#Axios-API" class="headerlink" title="Axios API"></a>Axios API</h3><blockquote>
<ul>
<li>基于promise用于浏览器和node.js的http客户端</li>
<li>支持浏览器和node.js</li>
<li>支持promise</li>
<li>能拦截请求和响应</li>
<li>自动转换JSON数据</li>
<li>能转换请求和响应数据</li>
</ul>
</blockquote>
<ul>
<li><p>axios 的基本用法</p>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js"># <span class="token number">1.</span> 发送<span class="token keyword">get</span> 请求
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/adata'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ret</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        # 拿到 ret 是一个对象 所有的对象都存在 ret 的 data 属性里面
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

# <span class="token number">2.</span> <span class="token keyword">get</span> 请求传递参数
# <span class="token number">2.1</span> 通过传统的url 以 <span class="token operator">?</span> 的形式传递参数
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios?id=123'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ret</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

# <span class="token number">2.2</span> restful 形式传递参数
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios/123'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ret</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

# <span class="token number">2.3</span> 通过params 形式传递参数
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ret</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

#<span class="token number">3</span> axios <span class="token keyword">delete</span> 请求传参 传参的形式和 <span class="token keyword">get</span> 请求一样
axios<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
	params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token number">111</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ret</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

# <span class="token number">4</span> axios 的 post 请求
# <span class="token number">4.1</span> 通过选项传递参数
axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    uname<span class="token operator">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span>
    pwd<span class="token operator">:</span> <span class="token number">123</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ret</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

# <span class="token number">4.2</span> 通过 URLSearchParams 传递参数
<span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'uname'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'pwd'</span><span class="token punctuation">,</span> <span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios'</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ret</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

#<span class="token number">5</span> axios put 请求传参 和 post 请求一样
axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios/123'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    uname<span class="token operator">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span>
    pwd<span class="token operator">:</span> <span class="token number">123</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ret</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>axios全局配置</p>
  <pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;script&gt;
    # 配置公共的请求头
    axios.defaults.baseURL &#x3D; &quot;http:&#x2F;&#x2F;localhost:3001&#x2F;&quot;;
    # 配置超时时间
    axios.defaults.timeout &#x3D; 2500;
    # 配置公共的请求头
    axios.defaults.headers.common[&#39;Authorization&#39;] &#x3D; AUTH_TOKEN;
    # 配置公共的 post 的 Content-Type
    axios.defaults.headers.post[&#39;Content-Type&#39;] &#x3D; &#39;application&#x2F;x-www-form-urlencoded&#39;;
    
    &#x2F;&#x2F;......
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>axios拦截器</p>
<ul>
<li><p>请求拦截器</p>
<blockquote>
<p>作用：在请求发送前进行一些操作</p>
<p>例如：在每个请求体里加上token，统一做了处理如果以后要改也非常容易</p>
</blockquote>
</li>
<li><p>响应拦截器</p>
<blockquote>
<p>作用：在接收到响应后进行一些操作</p>
<p>例如：在服务器返回登录状态失效，需要重新登录的时候，跳转到登录页</p>
</blockquote>
</li>
</ul>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js"># <span class="token number">1.</span> 请求拦截器
axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
	# <span class="token number">1.1</span> 请求前，在每个请求体里加上token
	config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>mytoken <span class="token operator">=</span> <span class="token string">'nihao'</span><span class="token punctuation">;</span>
    # <span class="token number">1.2</span> 这里一定要<span class="token keyword">return</span> 否则配置不成功
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    #<span class="token number">1.3</span> 对请求错误做点什么
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

#<span class="token number">2.</span> 响应拦截器
axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    #<span class="token number">2.1</span> 接收响应前<span class="token punctuation">,</span>过滤掉除res<span class="token punctuation">.</span>data以外的
    <span class="token keyword">var</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    #<span class="token number">2.2</span> 对响应错误做点什么
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async/Await"></a>Async/Await</h3><blockquote>
<p>async搭配await是ES7提出的，他的实现基于Promise</p>
</blockquote>
<ul>
<li><p>async的基本使用</p>
<ul>
<li><p>async 是关键字，而 async 确保了函数返回一个promise</p>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//如果代码中有 return &lt;非promise> 语句，</span>
<span class="token comment">//JavaScript会自动把返回的这个value值包装成promise的resolved值</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
# 两个写法是相等的
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>await的基本使用</p>
<ul>
<li><p>await 也是关键字，相当于promise.then()</p>
</li>
<li><p>await 可以让 JavaScript 进行等待，直到一个promise执行并返回它的结果，才会继续往下执行</p>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js"># async<span class="token operator">/</span><span class="token keyword">await</span> 让异步代码看起来<span class="token punctuation">,</span>表现起来更像同步代码
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'done!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    
    <span class="token comment">// 直到promise返回一个resolve值</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> promise
     <span class="token comment">// 'done!' </span>
    <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>asysnc/await错误处理</p>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">addTodo</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newTitle</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
    	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    		title<span class="token operator">:</span> newTitle
    	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="路由的基本概念"><a href="#路由的基本概念" class="headerlink" title="路由的基本概念"></a>路由的基本概念</h3><ul>
<li><p>后端路由</p>
<blockquote>
<p>概念：根据不同的用户 <strong>URL 请求</strong>，<strong>服务器</strong>返回不同的内容</p>
<p>本质：URL 请求地址与服务器资源之间的对应关系</p>
</blockquote>
</li>
<li><p>前端路由</p>
<blockquote>
<p>概念：用户触发不同的<strong>事件</strong>，<strong>事件函数</strong>渲染不同的页面内容</p>
<p>本质：用户事件与事件处理函数之间的对应关系</p>
</blockquote>
</li>
<li><p>SPA（Single Page Application）</p>
<ul>
<li>后端渲染（存在性能问题）</li>
<li>Ajax前端渲染（前端渲染提高性能，但是不支持浏览器的前进后退操作）</li>
<li>SPA的优势：整个网站只有一个页面，内容的变化通过Ajax局部更新实现，同时支持浏览器地址栏的前进和后退操作</li>
<li>SPA实现原理之一：基于URL地址的#hash（hash的变化会导致浏览器记录访问历<br>  史的变化、但是hash的变化不会触发新的URL请求）</li>
<li>在实现SPA过程中，最核心的技术点就是<strong>前端路由</strong></li>
</ul>
</li>
</ul>
<h3 id="VUE-Router"><a href="#VUE-Router" class="headerlink" title="VUE Router"></a>VUE Router</h3><ul>
<li><p>vue-router的基本使用</p>
<ol>
<li><p>引入相关的库文件</p>
 <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 先导入vue,再导入vue-router --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./lib/vue_2.5.22.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./lib/vue-router_3.0.2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>添加路由链接</p>
</li>
<li><p>添加路由填充位（占位符）</p>
 <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- router-link 是 vue 中提供的标签，默认会被渲染为 a 标签 --></span>
<span class="token comment">&lt;!-- to 属性默认会被渲染为 href 属性 --></span>
<span class="token comment">&lt;!-- to 属性的值默认会被渲染为 # 开头的 hash 地址 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Register<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>


<span class="token comment">&lt;!-- 将来通过路由规则匹配到的组件，将会被渲染到 router-view 所在的位置 --></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>定义路由组件</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> User <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	template<span class="token operator">:</span> <span class="token string">'&lt;div>User&lt;/div>'</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> Register <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	template<span class="token operator">:</span> <span class="token string">'&lt;div>Register&lt;/div>'</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>配置路由规则并创建路由实例</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// routes 是路由规则数组</span>
    routes<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token comment">// 每个路由规则都是一个配置对象，其中至少包含 path 和 component 两个属性：</span>
        <span class="token comment">// path 表示当前路由规则匹配的 hash 地址</span>
        <span class="token comment">// component 表示当前路由规则对应要展示的组件</span>
        <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/user'</span><span class="token punctuation">,</span>component<span class="token operator">:</span> User<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/register'</span><span class="token punctuation">,</span>component<span class="token operator">:</span> Register<span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>把路由挂载到 Vue 根实例中</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
    <span class="token comment">// 为了能够让路由规则生效，必须把路由对象挂载到 vue 实例对象上</span>
    router<span class="token operator">:</span>router
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p>路由重定向redirect</p>
<blockquote>
<p>路由重定向指的是：<br>在访问地址 A 的时候，强制用户跳转到地址 C，从而展示特定的组件页面</p>
</blockquote>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    routes<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token comment">// 其中，path 表示需要被重定向的原地址，redirect 表示将要被重定向到的新地址</span>
        <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">'/user'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/user'</span><span class="token punctuation">,</span>component<span class="token operator">:</span> User<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/register'</span><span class="token punctuation">,</span>component<span class="token operator">:</span> Register<span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>嵌套路由的用法</p>
<ol>
<li><p>在父路由中添加<strong>子路由的链接与占位符</strong></p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> Register <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
     template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>
         &lt;h1>Register 组件&lt;/h1>
         &lt;hr/>
         &lt;!-- 子路由链接 -->
         &lt;router-link to="/registerTab1">Tab1&lt;/router-link>
         &lt;router-link to="/registerTab2">Tab2&lt;/router-link>

         &lt;!-- 子路由占位符 -->
         &lt;router-view>&lt;/router-view>
     &lt;/div></span><span class="token template-punctuation string">`</span></span>
 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>设置子路由的模板template内容</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> tab1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	temPlate<span class="token operator">:</span> <span class="token string">'&lt;div>我是Register的Tab1&lt;/div>'</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> tab2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	temPlate<span class="token operator">:</span> <span class="token string">'&lt;div>我是Register的Tab2&lt;/div>'</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>配置父路由规则</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    routes<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> User <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
            path<span class="token operator">:</span> <span class="token string">'/register'</span><span class="token punctuation">,</span>
            component<span class="token operator">:</span> Register<span class="token punctuation">,</span>
            <span class="token comment">// 通过 children 属性，为 /register 添加子路由规则</span>
            children<span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'/registerTab1'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> tab1 <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                <span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'/registerTab2'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> tab2 <span class="token punctuation">&#125;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p>动态路由的基本使用</p>
<ul>
<li><p>多路由匹配</p>
<ol>
<li><p>现在有3个路由链接</p>
 <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user/1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user/2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user/3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>通过动态路由参数的模式进行路由匹配</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    routes<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token comment">// 动态路径参数 以冒号开头</span>
        <span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'/user/:id'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> User <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>路由组件获取路由参数</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 路由组件中通过$route.params获取路由参数</span>
    template<span class="token operator">:</span> <span class="token string">'&lt;div>User &#123;&#123; $route.params.id &#125;&#125;&lt;/div>'</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p>路由组件通过props传递参数</p>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    routes<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token comment">// 如果 props 是一个函数，则这个函数接收 route 对象为自己的形参</span>
        <span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'/user/:id'</span><span class="token punctuation">,</span> 
         component<span class="token operator">:</span> User<span class="token punctuation">,</span> 
         <span class="token function-variable function">props</span><span class="token operator">:</span> <span class="token parameter">route</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> uname<span class="token operator">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> id<span class="token operator">:</span> route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'uname'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    template<span class="token operator">:</span> <span class="token string">'&lt;div>用户信息：&#123;&#123; uname + '</span><span class="token operator">--</span><span class="token operator">-</span><span class="token string">' + age + '</span><span class="token operator">--</span><span class="token operator">-</span><span class="token string">' + id&#125;&#125;&lt;/div>'</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>命名路由的基本使用</p>
<blockquote>
<p>就是通过name属性，给路由规则起个别名</p>
</blockquote>
</li>
<li><p>编程式导航</p>
<blockquote>
<p>通过调用JavaScript形式的API实现导航的方式，叫做编程式导航<br>例如：普通网页中的 location.href </p>
</blockquote>
<ol>
<li><p>router.push() 方法的参数规则</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 字符串(路径名称)</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">)</span>
<span class="token comment">// 对象</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'/home'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// 命名路由(传递参数)</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">&#123;</span> userId<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// 带查询参数，变成 /register?uname=lisi</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'/register'</span><span class="token punctuation">,</span> query<span class="token operator">:</span> <span class="token punctuation">&#123;</span> uname<span class="token operator">:</span> <span class="token string">'lisi'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>this.$router.go(n)</p>
 <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//前进一步，等同于history.forward()</span>
router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">//后退一步，等同于history.back()</span>
router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>指南</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE基础使用</title>
    <url>/2021/05/31/VUE%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="VUE基础语法"><a href="#VUE基础语法" class="headerlink" title="VUE基础语法"></a>VUE基础语法</h4><ol>
<li><p>实例参数分析</p>
<ul>
<li>el：被挂载的DOM元素位置（CSS选择器或DOM元素）</li>
<li>data：模型数据（对象的形式）</li>
</ul>
</li>
<li><p>插值表达式用法</p>
<ul>
<li>在数据填充到HTML标签中（存在“闪动”的问题）</li>
<li>插值表达式支持基本的计算操作</li>
<li>数据动态响应（数据改变影响DOM改变）</li>
</ul>
</li>
<li><p>VUE代码运行原理</p>
<ul>
<li>渐进式框架，只关注视图层</li>
<li>编译过程（VUE语法–&gt;原生JS）</li>
<li>MVVM设计模式（数据驱动）  <img src="./mvvm.png" style="zoom:67%;" /></li>
</ul>
</li>
</ol>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  &#123;&#123; message &#125;&#125;  //'Hello Vue!'
  &#123;&#123;1 + 2&#125;&#125;      //3
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scirpt</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    //虚拟DOM
    var app = new Vue(&#123;
      el: '#app',
      data: &#123;
        message: 'Hello Vue!'
      &#125;
    &#125;);
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scirpt</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<span id="more"></span>




<h4 id="VUE指令Directive"><a href="#VUE指令Directive" class="headerlink" title="VUE指令Directive"></a>VUE指令Directive</h4><ol>
<li><p>什么是指令</p>
<ul>
<li>本质就是自定义属性（data-index）</li>
<li>指令格式：以v-开头（如v-cloak）</li>
</ul>
</li>
<li><p>v-cloak指令用法</p>
<ul>
<li><p>给元素添加自定义属性v-cloak（解决“闪动”问题）</p>
</li>
<li><p>原理：先隐藏，替换好值后再显示</p>
<p>  css<br>  [v-cloak]{</p>
<pre><code>  display: none;
</code></pre>
<p>  }</p>
</li>
</ul>
</li>
<li><p>v-text 填充纯文本（相当于innerText）</p>
<ul>
<li>相比插值表达式更加简洁，但会覆盖原来的内容</li>
</ul>
</li>
<li><p>v-html 填充html片段（相当于innerHtml）</p>
<ul>
<li>存在安全问题(xss攻击)</li>
<li>本站内部数据可以使用，来自第三方的数据不可以用</li>
</ul>
</li>
<li><p>v-pre 填充原始信息</p>
</li>
</ol>
<ul>
<li>显示原始信息，跳过编译过程</li>
</ul>
<ol start="6">
<li>v-once 只编译一次</li>
</ol>
<ul>
<li>取消数据动态响应，提高性能</li>
</ul>
<ol start="7">
<li>v-model=‘node’ 数据双向绑定<ul>
<li>视图输入改变数据，数据改变影响视图</li>
<li>实际包含两个操作v-bind数据绑定与v-on事件监听</li>
</ul>
</li>
</ol>
<p>####事件绑定</p>
<ol>
<li><p> v-on: ，缩写为@</p>
</li>
<li><p>绑定函数，默认第一个参数为事件对象event（只有一个参数时）；<br>事件对象必须作为最后一个参数显示传递， 名称必须是**$event** （多个参数时）</p>
</li>
<li><p>事件修饰符</p>
<ul>
<li><p>v-on:click.stop 相当于 event.stopPropagation()</p>
</li>
<li><p>v-on:click.prevent 相当于 event.preventDefault()</p>
</li>
<li><p>v-on:click.self 意思为跳过捕获与冒泡阶段，只有直接作用在该元素上的事件才可以执行<br>相当于 event.target</p>
</li>
<li><p>使用修饰符时，顺序很重要</p>
<blockquote>
<p>用 v-on:click.prevent.self 会阻止所有的点击，</p>
<p>而 v-on:click.self.prevent 只会阻止对元素自身的点击。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>按键修饰符</p>
<ul>
<li><p>常用的按键修饰符</p>
<blockquote>
<p>.enter =&gt;    enter键<br>.tab =&gt; tab键<br>.delete (捕获“删除”和“退格”按键) =&gt;  删除键<br>.esc =&gt; 取消键<br>.space =&gt;  空格键<br>.up =&gt;  上<br>.down =&gt;  下<br>.left =&gt;  左<br>.right =&gt;  右</p>
</blockquote>
</li>
<li><p>v-on:keyup.enter.space=”alertMe()” </p>
<blockquote>
<p>当点击enter或者space时，调用 alertMe()</p>
</blockquote>
</li>
<li><p>自定义按键修饰符（通过config.keyCodes赋值ASCII码）</p>
<blockquote>
<p>v-on:keydown.f5=”prompt()”</p>
<p>Vue.config.keyCodes.f5 = 116;</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;&#123;num&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>num++<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>handle1()<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>handle2(123, 456, $event)<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            num<span class="token operator">:</span> <span class="token number">0</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token function-variable function">handle1</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token function-variable function">handle2</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> p1<span class="token punctuation">)</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>####属性绑定</p>
<ol>
<li><p>v-bind指令用法</p>
<blockquote>
<p> &lt; a v-bind:href=’url’ &gt;跳转&lt; /a &gt;</p>
</blockquote>
</li>
<li><p>缩写形式</p>
<blockquote>
<p> &lt; a :href=’url’ &gt;跳转&lt; /a &gt;</p>
</blockquote>
</li>
<li><p>v-model底层实现</p>
<blockquote>
<p>&lt;input v-bind:value=”msg” v-on:input=”msg=$event.target.value”&gt;</p>
</blockquote>
</li>
</ol>
<h4 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h4><ol>
<li><p>对象语法</p>
<blockquote>
<p>&lt; div :class=“{ active: isActive }”&gt;isActive是布尔值&lt; /div&gt;</p>
</blockquote>
</li>
<li><p>数组语法</p>
<blockquote>
<p>&lt; div :class=“[ activeClass, errorClass ]”&gt;activeClass是className&lt; /div&gt;</p>
</blockquote>
</li>
<li><p>对象绑定与数组绑定可以混合使用</p>
<blockquote>
<p>&lt; div :class=“[ activeClass, errorClass，{ active: isActive } ]”&gt;activeClass是className&lt; /div&gt;</p>
</blockquote>
</li>
<li><p>默认的class会保留(base不会被覆盖)</p>
<blockquote>
<p>&lt; div class=“base” :class=“[ activeClass, errorClass ]”&gt;activeClass是className&lt; /div&gt;</p>
</blockquote>
</li>
<li><p>直接操作style</p>
<blockquote>
<p>&lt; div :style=“{ width: widthStyle }”&gt;widthStyle是…px&lt; /div&gt;</p>
<p>&lt; div :style=”[ baseStyles, overridingStyles ]”&gt;&lt; /div&gt;</p>
</blockquote>
</li>
</ol>
<p>####分支循环结构</p>
<ol>
<li><p>分支v-if</p>
 <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type === <span class="token punctuation">'</span>A<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type === <span class="token punctuation">'</span>B<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type === <span class="token punctuation">'</span>C<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>Not A/B/C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>分支v-show(本质为display:none;)</p>
 <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type === <span class="token punctuation">'</span>A<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type === <span class="token punctuation">'</span>B<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type === <span class="token punctuation">'</span>C<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>v-show 和 v-if的区别</p>
<ul>
<li><p>v-if 指令会根据表达式重建或销毁元素或组件以及它们所绑定的事件。</p>
</li>
<li><p>v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件</p>
</li>
<li><p>v-show 指令只是简单地设置 css 属性。</p>
</li>
<li><p>因为 v-if 指令开销较大，所以更适合条件不经常改变的场景。而 v-show 指令适合条件频繁切换的场景。</p>
</li>
</ul>
</li>
<li><p>循环v-for</p>
<ul>
<li><p>v-for=”(item, index) in items” :key=”index”</p>
<blockquote>
<p>:key=”item.id”，每次都应该绑定一个唯一值index或id</p>
<p>item 可以使元素或对象</p>
</blockquote>
</li>
<li><p>不建议 v-if 与 v-for 一起使用</p>
<blockquote>
<p>因为：v-for比v-if优先级高，所以使用的话，每次v-for都会执行v-if,造成不必要的计算，影响性能，尤其是当之需要渲染很小一部分的时候。</p>
<p>可以使用computed(计算属性) 过滤掉列表中不需要显示的项目</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<p>####表单数据绑定</p>
<ol>
<li><p>单选框</p>
 <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>gender<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>gender<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>复选框</p>
 <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- data:hobby应该为数组形式，hobby:['1','2'] --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ball<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>hobby<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ball<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sing<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>hobby<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>唱歌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>下拉框，多文本框</p>
 <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- multiple为多选，对应的occupation要数组形式 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>occupation<span class="token punctuation">'</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请选择职业...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>教师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>软件工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>律师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- textarea 是一个双标签，不需要绑定value 属性的  --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>desc<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>表单修饰符</p>
<ul>
<li><p>.number  转换为数值</p>
<blockquote>
<p>注意点：当开始输入非数字的字符串时，因为Vue无法将字符串转换成数值</p>
<p>所以属性值将实时更新成相同的字符串。即使后面输入数字，也将被视作字符串。“abc123”(应该使用.lazy解决)</p>
</blockquote>
</li>
<li><p>.trim  自动过滤用户输入的首尾空白字符</p>
</li>
<li><p>.lazy   将input事件切换成change事件</p>
<blockquote>
<p>在失去焦点 或者 按下回车键时才更新</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<p>####自定义指令 directive</p>
<ul>
<li><p>局部指令</p>
<blockquote>
<ul>
<li>局部指令，需要定义在  directives 的选项   用法和全局用法一样 </li>
<li>局部指令只能在当前组件里面使用</li>
<li>当全局指令和局部指令同名时，局部指令优先级高</li>
</ul>
</blockquote>
  <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>msg<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-focus</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">/*
      自定义指令-局部指令
    */</span>
    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            msg<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                color<span class="token operator">:</span> <span class="token string">'red'</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token comment">//局部指令，需要定义在  directives 的选项</span>
        directives<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            color<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// el 为dom元素</span>
                <span class="token function-variable function">bind</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token comment">//binging 是一个对象, 钩子函数参数之一</span>
                    el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>color<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            focus<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token comment">// 聚焦元素，用于input</span>
                    el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>全局指令</p>
  <pre class="line-numbers language-html" data-language="html"><code class="language-html">Vue.directive('focus', &#123;
	inserted: function (el) &#123;
		el.focus();
	&#125;
&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>钩子函数</p>
<ul>
<li><p>bind</p>
<blockquote>
<p>只调用一次，指令第一 次绑定到元素时调用。在这里可以进行一次性的初始化设置。</p>
</blockquote>
</li>
<li><p>inserted</p>
<blockquote>
<p>被绑定元素插入父节点时调用 (仅保证 父节点存在，但不一定已被插入文档中)。</p>
</blockquote>
</li>
<li><p>update</p>
<blockquote>
<p>所在组件的 VNode 更新 时调用，<strong>但是可能发生在其子 VNode 更新之前</strong>。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</p>
</blockquote>
</li>
<li><p>componentUpdated</p>
<blockquote>
<p>指令所在组件的 VNode <strong>及其子 VNode</strong> 全部更新后调 用。</p>
</blockquote>
</li>
<li><p>unbind</p>
<blockquote>
<p>只调用一次，指令与元素解绑时调用。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>钩子函数参数</p>
<ul>
<li>el<blockquote>
<p>指令所绑定的元素，可以用来直接操作 DOM。</p>
</blockquote>
</li>
<li>binding一个对象，包含以下 property：<blockquote>
<ul>
<li>name：指令名，不包括 v- 前缀。</li>
<li>value：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。</li>
<li>oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</li>
<li>expression：字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。</li>
<li>arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。</li>
<li>modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。</li>
</ul>
</blockquote>
</li>
<li>vnode<blockquote>
<p>Vue 编译生成的虚拟节点</p>
</blockquote>
</li>
<li>oldVnode<blockquote>
<p>上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h4 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性 computed"></a>计算属性 computed</h4><blockquote>
<ul>
<li>模板中放入太多的逻辑会让模板过重且难以维护  使用计算属性可以让模板更加的简洁</li>
<li>一定要有返回值，以return 结尾</li>
<li><strong>计算属性是基于它们的响应式依赖进行缓存的 (数据变才变)</strong></li>
<li>computed比较适合对多个变量或者对象进行处理后返回一个结果值，也就是多个变量中的某一个值发生了变化则我们监控的这个值也就会发生变</li>
</ul>
</blockquote>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- computed调用不需要加() --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;&#123;reverseString&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;&#123;reverseMessage(msg)&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">/*
    计算属性与方法的区别:计算属性是基于依赖进行缓存的，而方法不缓存
    当多次调用 reverseString  的时候 
    只要里面的 num 值不改变 他会把第一次计算的结果直接返回
 直到 data 中的 num 值改变 计算属性才会重新发生计算
  */</span>
  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      msg<span class="token operator">:</span> <span class="token string">'Nihao'</span><span class="token punctuation">,</span>
      num<span class="token operator">:</span> <span class="token number">100</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token comment">//computed  属性 定义 和 data 已经 methods 平级 </span>
    computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">//  reverseString  这个是我们自己定义的名字 </span>
      <span class="token function-variable function">reverseString</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
          
        <span class="token comment">//  当data 中的 num 的值改变的时候 reverseString 会自动发生计算 </span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
          total <span class="token operator">+=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
          
        <span class="token comment">// 这里一定要有return 否则 调用 reverseString 的时候无法拿到结果   </span>
        <span class="token keyword">return</span> total<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token comment">//computed通过函数闭包的形式可以传参，但不再依赖数据缓存（就和普通函数没区别）</span>
      <span class="token comment">//不推荐使用</span>
      <span class="token function-variable function">reverseMessage</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'computed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数据没变,执行一次</span>
        <span class="token keyword">return</span> <span class="token function">fucntion</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'methods'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数据没变,执行每次</span>
            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">joint</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>####函数闭包</p>
<ul>
<li><p>简单理解：“定义在一个函数内部的函数”</p>
</li>
<li><p>闭包的用途：</p>
<ol>
<li>可以读取父函数内部的变量</li>
<li>让这些变量的值始终保持在内存中</li>
</ol>
</li>
<li><p>使用闭包的注意点：</p>
<ol>
<li><p>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包</p>
<blockquote>
<p>解决方法是：在退出函数之前，将父函数置空 fn=null </p>
</blockquote>
</li>
<li><p>闭包会在父函数外部，改变父函数内部变量的值</p>
<blockquote>
<p>所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（public method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>
</blockquote>
</li>
</ol>
</li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>

        <span class="token function-variable function">nAdd</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            n<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">return</span> f2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">var</span> result<span class="token operator">=</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
    <span class="token comment">//此处n为f1的临时变量，经过调用f2闭包函数，n会保存在内存中</span>
    <span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// n=999</span>
    <span class="token function">nAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// n=1000</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"The Window"</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        name <span class="token operator">:</span> <span class="token string">"My Object"</span><span class="token punctuation">,</span>
        
        <span class="token function-variable function">getNameFunc</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token comment">//var that=this;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Object</span>
            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token comment">//此处改变父函数内部变量的值(例如：object.name)</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Window</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token comment">//显示"The Window"</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="侦听器-watch"><a href="#侦听器-watch" class="headerlink" title="侦听器   watch"></a>侦听器   watch</h4><blockquote>
<ul>
<li>使用watch来响应数据的变化</li>
<li>一般用于异步或者开销较大的操作</li>
<li>watch 中的属性 一定是 data 中已经存在的数据 （无需手动调用）</li>
<li><strong>当需要监听一个对象的改变时，普通的watch方法无法监听到对象内部属性的改变，只有data中的数据才能够监听到变化，此时就需要deep属性对对象进行深度监听</strong></li>
</ul>
</blockquote>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>firstName<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>姓：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>lastName<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;&#123;fullName&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;&#123;fullName_c&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            firstName<span class="token operator">:</span> <span class="token string">'Jim'</span><span class="token punctuation">,</span>
            lastName<span class="token operator">:</span> <span class="token string">'Green'</span><span class="token punctuation">,</span>
            fullName<span class="token operator">:</span> <span class="token string">'Jim Green'</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token comment">//watch  属性 定义 和 data 已经 methods 平级 </span>
        watch<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//   注意：  这里firstName  对应着data 中的 firstName </span>
            <span class="token comment">//   当 firstName 值 改变的时候  会自动触发 watch</span>
            <span class="token function-variable function">firstName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> val <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token comment">//   注意：  这里 lastName 对应着data 中的 lastName </span>
            <span class="token function-variable function">lastName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> val<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token function-variable function">fullName_c</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="过滤器-filter"><a href="#过滤器-filter" class="headerlink" title="过滤器 filter"></a>过滤器 filter</h4><blockquote>
<ul>
<li>Vue.js允许自定义过滤器，可被用于一些常见的文本格式化（如首字母大写）</li>
<li>一定要有返回值，以 return 结尾</li>
<li>过滤器可以用在两个地方：双花括号插值和 v-bind 表达式</li>
<li>过滤器应该被添加在JavaScript表达式的尾部，由“管道 | ”符号指示</li>
<li>支持级联操作  ，upper 的结果会传递到 lower</li>
<li>过滤器不改变真正的data，而只是改变渲染的结果，并返回过滤后的版本</li>
<li>全局注册时是filter，没有s的。而局部过滤器是filters，是有s的</li>
</ul>
</blockquote>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>msg<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- upper 被定义为接收单个参数的过滤器函数，表达式  msg  的值将作为参数传入到函数中 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;&#123;msg | upper&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!--  upper 的结果传递到lower中--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;&#123;msg | upper | lower&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:abc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>msg | upper<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>测试数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    
    <span class="token comment">&lt;!--filterA 被定义为接收三个参数的过滤器函数。--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; message | filterA('arg1', 'arg2') &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">//  lower  为全局过滤器     </span>
    Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'lower'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 在过滤器中 第一个参数 对应的是  管道符前面的数据  n  此时对应 message</span>
    <span class="token comment">// 第2个参数  a 对应 实参  arg1 字符串</span>
    <span class="token comment">// 第3个参数  b 对应 实参  arg2 字符串</span>
    Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'filterA'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> n<span class="token operator">+</span>a<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> n<span class="token operator">+</span>b<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            msg<span class="token operator">:</span> <span class="token string">''</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        filters<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//upper 被定义为接收单个参数的过滤器函数，表达式  msg  的值将作为参数传入到函数中</span>
            <span class="token function-variable function">upper</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="VUE生命周期"><a href="#VUE生命周期" class="headerlink" title="VUE生命周期"></a>VUE生命周期</h4><ul>
<li><p>挂载（初始化相关属性）</p>
<ol>
<li><p>beforeCreate</p>
<blockquote>
<p>在实例初始化之后，数据观测和事件配置之前被调用</p>
</blockquote>
</li>
<li><p>created</p>
<blockquote>
<p>在实例创建完成后被立即调用</p>
</blockquote>
</li>
<li><p>beforeMount</p>
<blockquote>
<p>在挂载开始之前被调用</p>
</blockquote>
</li>
<li><p>mounted</p>
<blockquote>
<p>被新创建的 vm.$el 替换，并挂载到实例上去后调用该钩子函数</p>
</blockquote>
</li>
</ol>
</li>
<li><p>更新（元素或组件的变更操作）</p>
<ol>
<li><p>beforeUpdate</p>
<blockquote>
<p>数据更新时调用，发生在虚拟DOM打补丁之前</p>
</blockquote>
</li>
<li><p>updated</p>
<blockquote>
<p>由于数据更改导致的虚拟DOM重新渲染和打补丁，在此之后会调用该钩子函数</p>
</blockquote>
</li>
</ol>
</li>
<li><p>销毁（销毁相关属性 this.$destory(); ）</p>
<ol>
<li><p>beforeDestroy</p>
<blockquote>
<p>实例销毁之前调用 </p>
</blockquote>
</li>
<li><p>destroyed</p>
<blockquote>
<p> 实例销毁后调用</p>
</blockquote>
</li>
</ol>
</li>
</ul>
<p><img src="./lifecycle.png" alt="lifecycle"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>指南</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
